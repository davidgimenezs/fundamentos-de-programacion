# TUTORIAL COMPLETO DE NUMPY
# Computaci√≥n num√©rica eficiente con Python
# Autor: David
# Fecha: Mayo 2025

import numpy as np
import time
import matplotlib.pyplot as plt
from datetime import datetime

# Configuraci√≥n para mostrar m√°s decimales cuando sea necesario
np.set_printoptions(precision=3, suppress=True)

print("üî¢ BIENVENIDO AL TUTORIAL COMPLETO DE NUMPY")
print("Computaci√≥n num√©rica de alto rendimiento con Python")
print("=" * 60)


def seccion_1_introduccion():
    """
    SECCI√ìN 1: Introducci√≥n a NumPy
    - ¬øQu√© es NumPy y por qu√© usarlo?
    - Comparaci√≥n con listas de Python
    - Instalaci√≥n y configuraci√≥n
    """
    print("\nüìö SECCI√ìN 1: INTRODUCCI√ìN A NUMPY")
    print("=" * 50)
    
    print("üí° ¬øQu√© es NumPy?")
    print("NumPy (Numerical Python) es la biblioteca fundamental para")
    print("computaci√≥n cient√≠fica en Python. Proporciona:")
    print("‚Ä¢ Arrays N-dimensionales eficientes")
    print("‚Ä¢ Funciones matem√°ticas optimizadas")
    print("‚Ä¢ Herramientas de √°lgebra lineal")
    print("‚Ä¢ Capacidades de broadcasting")
    print("‚Ä¢ Integraci√≥n con C/C++ y Fortran")
    
    print("\n‚ö° Ventajas de NumPy vs Listas de Python:")
    
    # Comparaci√≥n de rendimiento
    print("\nüèÉ‚Äç‚ôÇÔ∏è Prueba de velocidad - Suma de 1 mill√≥n de n√∫meros:")
    
    # Lista de Python
    lista_python = list(range(1000000))
    inicio = time.time()
    suma_python = sum(lista_python)
    tiempo_python = time.time() - inicio
    
    # Array de NumPy
    array_numpy = np.arange(1000000)
    inicio = time.time()
    suma_numpy = np.sum(array_numpy)
    tiempo_numpy = time.time() - inicio
    
    print(f"   Lista Python: {tiempo_python:.4f} segundos")
    print(f"   Array NumPy:  {tiempo_numpy:.4f} segundos")
    print(f"   üöÄ NumPy es {tiempo_python/tiempo_numpy:.1f}x m√°s r√°pido!")
    
    # Comparaci√≥n de memoria
    import sys
    memoria_lista = sys.getsizeof(lista_python[:1000])
    memoria_array = array_numpy[:1000].nbytes
    print(f"\nüíæ Uso de memoria (1000 elementos):")
    print(f"   Lista Python: {memoria_lista:,} bytes")
    print(f"   Array NumPy:  {memoria_array:,} bytes")
    print(f"   üí° NumPy usa {memoria_lista/memoria_array:.1f}x menos memoria!")
    
    print("\n‚úÖ Secci√≥n 1 completada - ¬°NumPy es poderoso!")


def seccion_2_creacion_arrays():
    """
    SECCI√ìN 2: Creaci√≥n de Arrays
    - Diferentes formas de crear arrays
    - Tipos de datos
    - Dimensiones y formas
    """
    print("\nüìö SECCI√ìN 2: CREACI√ìN DE ARRAYS")
    print("=" * 50)
    
    print("üî® 1. Creaci√≥n desde listas:")
    # Array 1D
    arr_1d = np.array([1, 2, 3, 4, 5])
    print(f"   Array 1D: {arr_1d}")
    print(f"   Forma: {arr_1d.shape}, Dimensiones: {arr_1d.ndim}")
    
    # Array 2D
    arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    print(f"\n   Array 2D:\n{arr_2d}")
    print(f"   Forma: {arr_2d.shape}, Dimensiones: {arr_2d.ndim}")
    
    # Array 3D
    arr_3d = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
    print(f"\n   Array 3D:\n{arr_3d}")
    print(f"   Forma: {arr_3d.shape}, Dimensiones: {arr_3d.ndim}")
    
    print("\nüî® 2. Funciones de creaci√≥n especiales:")
    
    # Ceros y unos
    ceros = np.zeros((3, 4))
    unos = np.ones((2, 3, 2))
    identidad = np.eye(4)
    
    print(f"   Matriz de ceros (3x4):\n{ceros}")
    print(f"\n   Matriz de unos (2x3x2):\n{unos}")
    print(f"\n   Matriz identidad (4x4):\n{identidad}")
    
    # Rangos y secuencias
    print("\nüî® 3. Rangos y secuencias:")
    secuencia1 = np.arange(0, 10, 2)  # inicio, fin, paso
    secuencia2 = np.linspace(0, 1, 5)  # inicio, fin, cantidad
    secuencia3 = np.logspace(0, 2, 5)  # 10^0 a 10^2, 5 puntos
    
    print(f"   arange(0, 10, 2): {secuencia1}")
    print(f"   linspace(0, 1, 5): {secuencia2}")
    print(f"   logspace(0, 2, 5): {secuencia3}")
    
    # Arrays aleatorios
    print("\nüî® 4. Arrays aleatorios:")
    np.random.seed(42)  # Para reproducibilidad
    aleatorio_uniforme = np.random.random((2, 3))
    aleatorio_normal = np.random.normal(0, 1, (2, 3))
    aleatorio_enteros = np.random.randint(1, 10, (2, 3))
    
    print(f"   Random uniforme [0,1):\n{aleatorio_uniforme}")
    print(f"\n   Random normal (Œº=0, œÉ=1):\n{aleatorio_normal}")
    print(f"\n   Random enteros [1,10):\n{aleatorio_enteros}")
    
    # Tipos de datos
    print("\nüî® 5. Tipos de datos:")
    arr_int = np.array([1, 2, 3], dtype=np.int32)
    arr_float = np.array([1, 2, 3], dtype=np.float64)
    arr_complex = np.array([1+2j, 3+4j])
    arr_bool = np.array([True, False, True])
    
    print(f"   Enteros int32: {arr_int} - tipo: {arr_int.dtype}")
    print(f"   Flotantes float64: {arr_float} - tipo: {arr_float.dtype}")
    print(f"   Complejos: {arr_complex} - tipo: {arr_complex.dtype}")
    print(f"   Booleanos: {arr_bool} - tipo: {arr_bool.dtype}")
    
    print("\n‚úÖ Secci√≥n 2 completada - ¬°Arrays creados exitosamente!")


def seccion_3_indexado_slicing():
    """
    SECCI√ìN 3: Indexado y Slicing
    - Acceso a elementos
    - Slicing avanzado
    - Indexado booleano
    - Indexado con arrays
    """
    print("\nüìö SECCI√ìN 3: INDEXADO Y SLICING")
    print("=" * 50)
    
    # Crear array de ejemplo
    arr = np.arange(20).reshape(4, 5)
    print(f"Array de ejemplo (4x5):\n{arr}")
    
    print("\nüéØ 1. Indexado b√°sico:")
    print(f"   arr[0, 0] = {arr[0, 0]} (primera fila, primera columna)")
    print(f"   arr[2, 3] = {arr[2, 3]} (tercera fila, cuarta columna)")
    print(f"   arr[-1, -1] = {arr[-1, -1]} (√∫ltima fila, √∫ltima columna)")
    
    print("\nüéØ 2. Slicing de filas y columnas:")
    print(f"   Primera fila: arr[0, :] = {arr[0, :]}")
    print(f"   Primera columna: arr[:, 0] = {arr[:, 0]}")
    print(f"   √öltimas 2 filas: arr[-2:, :] =\n{arr[-2:, :]}")
    print(f"   Columnas del medio: arr[:, 1:4] =\n{arr[:, 1:4]}")
    
    print("\nüéØ 3. Slicing con pasos:")
    print(f"   Cada segunda fila: arr[::2, :] =\n{arr[::2, :]}")
    print(f"   Cada segunda columna: arr[:, ::2] =\n{arr[:, ::2]}")
    print(f"   Submatriz con paso: arr[1:4:2, 1:5:2] =\n{arr[1:4:2, 1:5:2]}")
    
    print("\nüéØ 4. Indexado booleano:")
    mascara = arr > 10
    print(f"   M√°scara (arr > 10):\n{mascara}")
    elementos_mayores = arr[mascara]
    print(f"   Elementos > 10: {elementos_mayores}")
    
    # Condiciones m√∫ltiples
    mascara_compleja = (arr > 5) & (arr < 15)
    print(f"   Elementos entre 5 y 15: {arr[mascara_compleja]}")
    
    print("\nüéØ 5. Indexado con arrays:")
    filas = np.array([0, 2, 3])
    columnas = np.array([1, 3, 4])
    print(f"   Filas seleccionadas {filas}: arr[filas, :] =\n{arr[filas, :]}")
    print(f"   Elementos espec√≠ficos arr[filas, columnas] = {arr[filas, columnas]}")
    
    print("\nüéØ 6. Modificaci√≥n con indexado:")
    arr_copia = arr.copy()
    arr_copia[arr_copia > 15] = 999  # Cambiar elementos > 15 a 999
    print(f"   Array modificado (>15 ‚Üí 999):\n{arr_copia}")
    
    print("\n‚úÖ Secci√≥n 3 completada - ¬°Indexado dominado!")


def seccion_4_operaciones_matematicas():
    """
    SECCI√ìN 4: Operaciones Matem√°ticas
    - Operaciones elemento a elemento
    - Funciones matem√°ticas universales
    - Operaciones de reducci√≥n
    - Broadcasting
    """
    print("\nüìö SECCI√ìN 4: OPERACIONES MATEM√ÅTICAS")
    print("=" * 50)
    
    # Arrays de ejemplo
    a = np.array([[1, 2, 3], [4, 5, 6]])
    b = np.array([[7, 8, 9], [10, 11, 12]])
    
    print(f"Array A:\n{a}")
    print(f"Array B:\n{b}")
    
    print("\n‚ûï 1. Operaciones aritm√©ticas b√°sicas:")
    print(f"   A + B =\n{a + b}")
    print(f"   A - B =\n{a - b}")
    print(f"   A * B (elemento a elemento) =\n{a * b}")
    print(f"   A / B =\n{a / b}")
    print(f"   A ** 2 =\n{a ** 2}")
    
    print("\nüî¢ 2. Funciones matem√°ticas universales:")
    x = np.array([0, np.pi/6, np.pi/4, np.pi/3, np.pi/2])
    print(f"   x = {x}")
    print(f"   sin(x) = {np.sin(x)}")
    print(f"   cos(x) = {np.cos(x)}")
    print(f"   exp(x) = {np.exp(x)}")
    print(f"   log(x+1) = {np.log(x + 1)}")
    print(f"   sqrt(x+1) = {np.sqrt(x + 1)}")
    
    print("\nüìä 3. Operaciones de reducci√≥n:")
    matriz = np.random.randint(1, 10, (3, 4))
    print(f"   Matriz aleatoria:\n{matriz}")
    print(f"   Suma total: {np.sum(matriz)}")
    print(f"   Suma por filas: {np.sum(matriz, axis=1)}")
    print(f"   Suma por columnas: {np.sum(matriz, axis=0)}")
    print(f"   Media: {np.mean(matriz):.2f}")
    print(f"   Mediana: {np.median(matriz):.2f}")
    print(f"   Desviaci√≥n est√°ndar: {np.std(matriz):.2f}")
    print(f"   M√≠nimo: {np.min(matriz)}, M√°ximo: {np.max(matriz)}")
    
    print("\nüì° 4. Broadcasting - ¬°La magia de NumPy!")
    print("   Broadcasting permite operaciones entre arrays de diferentes formas")
    
    # Ejemplo 1: Array 2D + escalar
    matriz_2d = np.array([[1, 2, 3], [4, 5, 6]])
    escalar = 10
    resultado1 = matriz_2d + escalar
    print(f"   Matriz 2D + escalar:\n{matriz_2d} + {escalar} =\n{resultado1}")
    
    # Ejemplo 2: Array 2D + Array 1D
    vector = np.array([10, 20, 30])
    resultado2 = matriz_2d + vector
    print(f"   Matriz 2D + vector:\n{matriz_2d} +\n{vector} =\n{resultado2}")
    
    # Ejemplo 3: Broadcasting con diferentes dimensiones
    col_vector = np.array([[100], [200]])
    resultado3 = matriz_2d + col_vector
    print(f"   Matriz 2D + vector columna:\n{matriz_2d} +\n{col_vector} =\n{resultado3}")
    
    print("\nüßÆ 5. √Ålgebra lineal:")
    A = np.array([[1, 2], [3, 4]])
    B = np.array([[5, 6], [7, 8]])
    
    print(f"   Matriz A:\n{A}")
    print(f"   Matriz B:\n{B}")
    print(f"   Producto matricial A @ B =\n{A @ B}")
    print(f"   Determinante de A: {np.linalg.det(A):.2f}")
    print(f"   Traza de A: {np.trace(A)}")
    
    # Resolver sistema de ecuaciones Ax = b
    b = np.array([1, 2])
    x = np.linalg.solve(A, b)
    print(f"   Soluci√≥n Ax = b, donde b = {b}: x = {x}")
    
    print("\n‚úÖ Secci√≥n 4 completada - ¬°Matem√°ticas poderosas!")


def seccion_5_manipulacion_forma():
    """
    SECCI√ìN 5: Manipulaci√≥n de Forma y Dimensiones
    - Reshape, flatten, ravel
    - Transpose
    - Concatenaci√≥n y divisi√≥n
    - Apilado de arrays
    """
    print("\nüìö SECCI√ìN 5: MANIPULACI√ìN DE FORMA Y DIMENSIONES")
    print("=" * 50)
    
    # Array de ejemplo
    arr_original = np.arange(12)
    print(f"Array original: {arr_original} (forma: {arr_original.shape})")
    
    print("\nüîÑ 1. Cambio de forma (reshape):")
    arr_2d = arr_original.reshape(3, 4)
    arr_3d = arr_original.reshape(2, 2, 3)
    
    print(f"   Reshape a (3,4):\n{arr_2d}")
    print(f"   Reshape a (2,2,3):\n{arr_3d}")
    
    # Reshape autom√°tico
    arr_auto = arr_original.reshape(3, -1)  # -1 calcula autom√°ticamente
    print(f"   Reshape autom√°tico (3,-1):\n{arr_auto}")
    
    print("\nüìè 2. Aplanar arrays:")
    print(f"   flatten(): {arr_2d.flatten()}")
    print(f"   ravel(): {arr_2d.ravel()}")
    print(f"   reshape(-1): {arr_2d.reshape(-1)}")
    
    print("\nüîÑ 3. Transposici√≥n:")
    matriz = np.array([[1, 2, 3], [4, 5, 6]])
    print(f"   Matriz original (2x3):\n{matriz}")
    print(f"   Transpuesta .T (3x2):\n{matriz.T}")
    print(f"   Transpuesta con transpose():\n{np.transpose(matriz)}")
    
    print("\nüîó 4. Concatenaci√≥n de arrays:")
    a = np.array([[1, 2], [3, 4]])
    b = np.array([[5, 6], [7, 8]])
    
    print(f"   Array A:\n{a}")
    print(f"   Array B:\n{b}")
    
    # Concatenaci√≥n vertical y horizontal
    concat_v = np.concatenate([a, b], axis=0)  # Vertical
    concat_h = np.concatenate([a, b], axis=1)  # Horizontal
    
    print(f"   Concatenaci√≥n vertical (axis=0):\n{concat_v}")
    print(f"   Concatenaci√≥n horizontal (axis=1):\n{concat_h}")
    
    # Funciones espec√≠ficas
    vstack_result = np.vstack([a, b])  # Vertical stack
    hstack_result = np.hstack([a, b])  # Horizontal stack
    
    print(f"   vstack():\n{vstack_result}")
    print(f"   hstack():\n{hstack_result}")
    
    print("\nüìö 5. Apilado de arrays:")
    # Crear un nuevo eje
    stack_axis0 = np.stack([a, b], axis=0)  # Nueva primera dimensi√≥n
    stack_axis2 = np.stack([a, b], axis=2)  # Nueva tercera dimensi√≥n
    
    print(f"   stack(axis=0) - forma {stack_axis0.shape}:\n{stack_axis0}")
    print(f"   stack(axis=2) - forma {stack_axis2.shape}:\n{stack_axis2}")
    
    print("\n‚úÇÔ∏è 6. Divisi√≥n de arrays:")
    arr_grande = np.arange(12).reshape(4, 3)
    print(f"   Array grande (4x3):\n{arr_grande}")
    
    # Dividir en partes iguales
    dividido_v = np.split(arr_grande, 2, axis=0)  # 2 partes verticalmente
    dividido_h = np.split(arr_grande, 3, axis=1)  # 3 partes horizontalmente
    
    print(f"   Dividido verticalmente (2 partes):")
    for i, parte in enumerate(dividido_v):
        print(f"     Parte {i+1}:\n{parte}")
    
    print(f"   Dividido horizontalmente (3 partes):")
    for i, parte in enumerate(dividido_h):
        print(f"     Parte {i+1}:\n{parte}")
    
    print("\n‚úÖ Secci√≥n 5 completada - ¬°Formas dominadas!")


def seccion_6_arrays_avanzados():
    """
    SECCI√ìN 6: T√©cnicas Avanzadas
    - Vectorizaci√≥n
    - Funciones personalizadas (ufunc)
    - Where, select, choose
    - Unique, sorting
    """
    print("\nüìö SECCI√ìN 6: T√âCNICAS AVANZADAS")
    print("=" * 50)
    
    print("‚ö° 1. Vectorizaci√≥n - Evitar bucles for:")
    
    # Ejemplo: calcular distancias euclidianas
    puntos_x = np.array([1, 2, 3, 4, 5])
    puntos_y = np.array([2, 4, 1, 3, 5])
    origen_x, origen_y = 0, 0
    
    # Forma pyth√≥nica (lenta)
    inicio = time.time()
    distancias_python = []
    for x, y in zip(puntos_x, puntos_y):
        dist = ((x - origen_x)**2 + (y - origen_y)**2)**0.5
        distancias_python.append(dist)
    tiempo_python = time.time() - inicio
    
    # Forma vectorizada (r√°pida)
    inicio = time.time()
    distancias_numpy = np.sqrt((puntos_x - origen_x)**2 + (puntos_y - origen_y)**2)
    tiempo_numpy = time.time() - inicio
    
    print(f"   Puntos: ({puntos_x}, {puntos_y})")
    print(f"   Distancias (Python): {distancias_python}")
    print(f"   Distancias (NumPy): {distancias_numpy}")
    print(f"   ‚ö° Vectorizaci√≥n: {tiempo_python/tiempo_numpy:.1f}x m√°s r√°pida")
    
    print("\nüîß 2. Funci√≥n where - Selecci√≥n condicional:")
    datos = np.array([-2, -1, 0, 1, 2, 3, 4, 5])
    
    # Reemplazar negativos con 0
    resultado_where = np.where(datos < 0, 0, datos)
    print(f"   Datos originales: {datos}")
    print(f"   Negativos ‚Üí 0: {resultado_where}")
    
    # Condici√≥n m√∫ltiple
    resultado_complejo = np.where(datos < 0, 'negativo', 
                                 np.where(datos == 0, 'cero', 'positivo'))
    print(f"   Clasificaci√≥n: {resultado_complejo}")
    
    print("\nüéØ 3. Funci√≥n select - M√∫ltiples condiciones:")
    valores = np.array([85, 92, 78, 96, 65, 88, 73, 91])
    condiciones = [
        valores >= 90,  # Excelente
        valores >= 80,  # Bueno
        valores >= 70,  # Regular
    ]
    opciones = ['Excelente', 'Bueno', 'Regular']
    calificaciones = np.select(condiciones, opciones, default='Insuficiente')
    
    print(f"   Puntajes: {valores}")
    print(f"   Calificaciones: {calificaciones}")
    
    print("\nüîç 4. Valores √∫nicos y ordenamiento:")
    datos_desordenados = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
    
    # Valores √∫nicos
    unicos = np.unique(datos_desordenados)
    unicos_counts = np.unique(datos_desordenados, return_counts=True)
    
    print(f"   Datos: {datos_desordenados}")
    print(f"   √önicos: {unicos}")
    print(f"   √önicos con conteos: {dict(zip(unicos_counts[0], unicos_counts[1]))}")
    
    # Ordenamiento
    ordenado = np.sort(datos_desordenados)
    indices_orden = np.argsort(datos_desordenados)
    
    print(f"   Ordenado: {ordenado}")
    print(f"   √çndices de ordenamiento: {indices_orden}")
    
    # Ordenamiento por columnas en matriz
    matriz = np.array([[3, 1, 4], [1, 5, 9], [2, 6, 5]])
    print(f"   Matriz original:\n{matriz}")
    print(f"   Ordenada por filas:\n{np.sort(matriz, axis=1)}")
    print(f"   Ordenada por columnas:\n{np.sort(matriz, axis=0)}")
    
    print("\nüßÆ 5. Funciones de agregaci√≥n avanzadas:")
    datos_2d = np.random.randint(1, 100, (4, 5))
    print(f"   Matriz aleatoria (4x5):\n{datos_2d}")
    
    print(f"   Percentiles [25, 50, 75]: {np.percentile(datos_2d, [25, 50, 75])}")
    print(f"   Valor m√°s frecuente por fila:")
    for i, fila in enumerate(datos_2d):
        valores, counts = np.unique(fila, return_counts=True)
        moda = valores[np.argmax(counts)]
        print(f"     Fila {i}: {moda}")
    
    print("\n‚úÖ Secci√≥n 6 completada - ¬°T√©cnicas avanzadas dominadas!")


def seccion_7_aplicaciones_practicas():
    """
    SECCI√ìN 7: Aplicaciones Pr√°cticas
    - Procesamiento de im√°genes
    - An√°lisis de datos cient√≠ficos
    - Simulaciones Monte Carlo
    - Procesamiento de se√±ales
    """
    print("\nüìö SECCI√ìN 7: APLICACIONES PR√ÅCTICAS")
    print("=" * 50)
    
    print("üñºÔ∏è 1. Simulaci√≥n de procesamiento de im√°genes:")
    # Crear una "imagen" sint√©tica (matriz de p√≠xeles)
    altura, ancho = 50, 50
    imagen = np.random.randint(0, 256, (altura, ancho, 3), dtype=np.uint8)
    
    print(f"   Imagen sint√©tica: {imagen.shape} (altura x ancho x canales RGB)")
    print(f"   Valor promedio por canal: R={np.mean(imagen[:,:,0]):.1f}, "
          f"G={np.mean(imagen[:,:,1]):.1f}, B={np.mean(imagen[:,:,2]):.1f}")
    
    # Conversi√≥n a escala de grises
    gris = np.mean(imagen, axis=2).astype(np.uint8)
    print(f"   Imagen en gris: {gris.shape}, promedio: {np.mean(gris):.1f}")
    
    # Aplicar filtro (blur simple)
    kernel = np.ones((3, 3)) / 9  # Kernel de promedio 3x3
    print(f"   Kernel de blur aplicado: {kernel.shape}")
    
    print("\nüìä 2. An√°lisis estad√≠stico de datos cient√≠ficos:")
    # Simular datos de temperatura diaria por un a√±o
    np.random.seed(42)
    dias = np.arange(365)
    temperatura_base = 20 + 10 * np.sin(2 * np.pi * dias / 365)  # Ciclo anual
    ruido = np.random.normal(0, 3, 365)  # Variabilidad diaria
    temperaturas = temperatura_base + ruido
    
    print(f"   Datos de temperatura: {len(temperaturas)} d√≠as")
    print(f"   Estad√≠sticas:")
    print(f"     Promedio anual: {np.mean(temperaturas):.1f}¬∞C")
    print(f"     M√°xima: {np.max(temperaturas):.1f}¬∞C (d√≠a {np.argmax(temperaturas)+1})")
    print(f"     M√≠nima: {np.min(temperaturas):.1f}¬∞C (d√≠a {np.argmin(temperaturas)+1})")
    print(f"     Desviaci√≥n est√°ndar: {np.std(temperaturas):.1f}¬∞C")
    
    # An√°lisis por estaciones
    invierno = temperaturas[:90]
    primavera = temperaturas[90:180]
    verano = temperaturas[180:270]
    otono = temperaturas[270:]
    
    print(f"   Promedios estacionales:")
    print(f"     Invierno: {np.mean(invierno):.1f}¬∞C")
    print(f"     Primavera: {np.mean(primavera):.1f}¬∞C")
    print(f"     Verano: {np.mean(verano):.1f}¬∞C")
    print(f"     Oto√±o: {np.mean(otono):.1f}¬∞C")
    
    print("\nüé≤ 3. Simulaci√≥n Monte Carlo - Estimaci√≥n de œÄ:")
    n_puntos = 100000
    # Generar puntos aleatorios en el cuadrado [-1,1] x [-1,1]
    x = np.random.uniform(-1, 1, n_puntos)
    y = np.random.uniform(-1, 1, n_puntos)
    
    # Verificar cu√°les est√°n dentro del c√≠rculo unitario
    dentro_circulo = (x**2 + y**2) <= 1
    puntos_dentro = np.sum(dentro_circulo)
    
    # Estimar œÄ
    pi_estimado = 4 * puntos_dentro / n_puntos
    error = abs(pi_estimado - np.pi)
    
    print(f"   Puntos generados: {n_puntos:,}")
    print(f"   Puntos dentro del c√≠rculo: {puntos_dentro:,}")
    print(f"   œÄ estimado: {pi_estimado:.6f}")
    print(f"   œÄ real: {np.pi:.6f}")
    print(f"   Error: {error:.6f} ({error/np.pi*100:.4f}%)")
    
    print("\nüì° 4. Procesamiento de se√±ales:")
    # Generar se√±al sint√©tica
    t = np.linspace(0, 2, 1000)  # 2 segundos, 1000 puntos
    frecuencia1, frecuencia2 = 5, 20  # Hz
    se√±al = (np.sin(2*np.pi*frecuencia1*t) + 
             0.5*np.sin(2*np.pi*frecuencia2*t) + 
             0.1*np.random.normal(0, 1, len(t)))
    
    print(f"   Se√±al generada: {len(se√±al)} muestras en {t[-1]} segundos")
    print(f"   Componentes: {frecuencia1}Hz + {frecuencia2}Hz + ruido")
    
    # An√°lisis estad√≠stico de la se√±al
    print(f"   Estad√≠sticas de la se√±al:")
    print(f"     Amplitud promedio: {np.mean(np.abs(se√±al)):.3f}")
    print(f"     RMS: {np.sqrt(np.mean(se√±al**2)):.3f}")
    print(f"     Pico m√°ximo: {np.max(np.abs(se√±al)):.3f}")
    
    # Detecci√≥n de picos simples
    umbral = 1.5
    picos = np.where(np.abs(se√±al) > umbral)[0]
    print(f"     Picos detectados (|amplitud| > {umbral}): {len(picos)}")
    
    print("\nüß¨ 5. An√°lisis de datos biol√≥gicos (simulado):")
    # Simular datos de expresi√≥n g√©nica
    n_genes = 1000
    n_muestras = 50
    expresion_genes = np.random.lognormal(0, 1, (n_genes, n_muestras))
    
    print(f"   Datos de expresi√≥n: {n_genes} genes x {n_muestras} muestras")
    
    # Encontrar genes altamente expresados
    expresion_promedio = np.mean(expresion_genes, axis=1)
    genes_altos = np.where(expresion_promedio > np.percentile(expresion_promedio, 95))[0]
    
    print(f"   Genes altamente expresados (>95 percentil): {len(genes_altos)}")
    print(f"   Expresi√≥n promedio m√°s alta: {np.max(expresion_promedio):.2f}")
    
    # Correlaci√≥n entre muestras
    correlaciones = np.corrcoef(expresion_genes.T)
    correlacion_promedio = np.mean(correlaciones[np.triu_indices(n_muestras, k=1)])
    print(f"   Correlaci√≥n promedio entre muestras: {correlacion_promedio:.3f}")
    
    print("\n‚úÖ Secci√≥n 7 completada - ¬°Aplicaciones pr√°cticas dominadas!")


def seccion_8_optimizacion_rendimiento():
    """
    SECCI√ìN 8: Optimizaci√≥n y Rendimiento
    - Mejores pr√°cticas de rendimiento
    - Uso eficiente de memoria
    - Vectorizaci√≥n avanzada
    - Comparaciones de velocidad
    """
    print("\nüìö SECCI√ìN 8: OPTIMIZACI√ìN Y RENDIMIENTO")
    print("=" * 50)
    
    print("‚ö° 1. Comparaci√≥n de m√©todos de creaci√≥n:")
    n = 1000000
    
    # M√©todo 1: Lista de Python + conversi√≥n
    inicio = time.time()
    lista = list(range(n))
    arr_desde_lista = np.array(lista)
    tiempo_lista = time.time() - inicio
    
    # M√©todo 2: np.arange directo
    inicio = time.time()
    arr_arange = np.arange(n)
    tiempo_arange = time.time() - inicio
    
    # M√©todo 3: np.empty + asignaci√≥n
    inicio = time.time()
    arr_empty = np.empty(n)
    arr_empty[:] = range(n)
    tiempo_empty = time.time() - inicio
    
    print(f"   Crear array de {n:,} elementos:")
    print(f"     Lista ‚Üí array: {tiempo_lista:.4f}s")
    print(f"     np.arange: {tiempo_arange:.4f}s ({tiempo_lista/tiempo_arange:.1f}x m√°s r√°pido)")
    print(f"     np.empty + asignaci√≥n: {tiempo_empty:.4f}s")
    
    print("\nüíæ 2. Gesti√≥n eficiente de memoria:")
    
    # Tipos de datos y memoria
    arr_int64 = np.arange(1000, dtype=np.int64)
    arr_int32 = np.arange(1000, dtype=np.int32)
    arr_int8 = np.arange(1000, dtype=np.int8)
    
    print(f"   Memoria por tipo de dato (1000 elementos):")
    print(f"     int64: {arr_int64.nbytes:,} bytes")
    print(f"     int32: {arr_int32.nbytes:,} bytes ({arr_int64.nbytes//arr_int32.nbytes}x menos)")
    print(f"     int8: {arr_int8.nbytes:,} bytes ({arr_int64.nbytes//arr_int8.nbytes}x menos)")
    
    # Views vs copias
    arr_original = np.arange(100000)
    
    inicio = time.time()
    view = arr_original[::2]  # View (no copia memoria)
    tiempo_view = time.time() - inicio
    
    inicio = time.time()
    copia = arr_original[::2].copy()  # Copia expl√≠cita
    tiempo_copia = time.time() - inicio
    
    print(f"\n   Views vs Copias:")
    print(f"     Crear view: {tiempo_view:.6f}s")
    print(f"     Crear copia: {tiempo_copia:.6f}s ({tiempo_copia/tiempo_view:.1f}x m√°s lento)")
    print(f"     Memoria view: comparte con original")
    print(f"     Memoria copia: {copia.nbytes:,} bytes adicionales")
    
    print("\nüîÑ 3. Vectorizaci√≥n vs bucles:")
    
    # Operaci√≥n: calcular ra√≠z cuadrada + seno
    datos = np.random.random(100000)
    
    # Bucle Python
    inicio = time.time()
    resultado_bucle = []
    for x in datos:
        resultado_bucle.append(np.sqrt(x) + np.sin(x))
    resultado_bucle = np.array(resultado_bucle)
    tiempo_bucle = time.time() - inicio
    
    # Vectorizado
    inicio = time.time()
    resultado_vectorizado = np.sqrt(datos) + np.sin(datos)
    tiempo_vectorizado = time.time() - inicio
    
    print(f"   Operaci√≥n: sqrt(x) + sin(x) en {len(datos):,} elementos")
    print(f"     Bucle Python: {tiempo_bucle:.4f}s")
    print(f"     Vectorizado: {tiempo_vectorizado:.4f}s")
    print(f"     üöÄ Mejora: {tiempo_bucle/tiempo_vectorizado:.1f}x m√°s r√°pido")
    print(f"     Resultados id√©nticos: {np.allclose(resultado_bucle, resultado_vectorizado)}")
    
    print("\nüßÆ 4. Operaciones in-place vs nuevos arrays:")
    
    arr_test = np.random.random(100000)
    
    # Operaci√≥n que crea nuevo array
    inicio = time.time()
    resultado_nuevo = arr_test * 2 + 1
    tiempo_nuevo = time.time() - inicio
    
    # Operaci√≥n in-place
    arr_inplace = arr_test.copy()
    inicio = time.time()
    arr_inplace *= 2
    arr_inplace += 1
    tiempo_inplace = time.time() - inicio
    
    print(f"   Operaci√≥n: x = x * 2 + 1 en {len(arr_test):,} elementos")
    print(f"     Nuevo array: {tiempo_nuevo:.6f}s")
    print(f"     In-place: {tiempo_inplace:.6f}s ({tiempo_nuevo/tiempo_inplace:.1f}x m√°s r√°pido)")
    print(f"     Memoria ahorrada: {resultado_nuevo.nbytes:,} bytes")
    
    print("\nüéØ 5. Consejos de optimizaci√≥n:")
    consejos = [
        "‚Ä¢ Usa el tipo de dato m√°s peque√±o posible (int32 vs int64)",
        "‚Ä¢ Prefiere operaciones vectorizadas sobre bucles",
        "‚Ä¢ Usa views en lugar de copias cuando sea posible",
        "‚Ä¢ Aprovecha operaciones in-place para ahorrar memoria",
        "‚Ä¢ Pre-aloca arrays con np.empty() si conoces el tama√±o",
        "‚Ä¢ Usa np.einsum() para operaciones tensoriales complejas",
        "‚Ä¢ Considera numba o Cython para bucles inevitables",
        "‚Ä¢ Perfila tu c√≥digo con %timeit en Jupyter"
    ]
    
    for consejo in consejos:
        print(f"   {consejo}")
    
    print("\n‚úÖ Secci√≥n 8 completada - ¬°Rendimiento optimizado!")


def mostrar_resumen_numpy():
    """
    Resumen completo de funciones NumPy m√°s importantes
    """
    print("\nüìã RESUMEN DE FUNCIONES NUMPY M√ÅS IMPORTANTES")
    print("=" * 60)
    
    categorias = {
        "üèóÔ∏è CREACI√ìN DE ARRAYS": [
            "np.array(lista) - Crear desde lista",
            "np.zeros(forma) - Array de ceros",
            "np.ones(forma) - Array de unos", 
            "np.eye(n) - Matriz identidad",
            "np.arange(inicio, fin, paso) - Secuencia",
            "np.linspace(inicio, fin, num) - Puntos equiespaciados",
            "np.random.random(forma) - N√∫meros aleatorios [0,1)",
            "np.random.normal(Œº, œÉ, forma) - Distribuci√≥n normal"
        ],
        
        "üéØ INDEXADO Y SELECCI√ìN": [
            "arr[i, j] - Elemento espec√≠fico",
            "arr[inicio:fin] - Slicing",
            "arr[arr > valor] - Indexado booleano",
            "np.where(condici√≥n, x, y) - Selecci√≥n condicional"
        ],
        
        "üî¢ OPERACIONES MATEM√ÅTICAS": [
            "np.sum(), np.mean(), np.std() - Estad√≠sticas",
            "np.min(), np.max(), np.argmin(), np.argmax() - Extremos",
            "np.sin(), np.cos(), np.exp(), np.log() - Funciones matem√°ticas",
            "np.sqrt(), np.abs(), np.round() - Operaciones b√°sicas"
        ],
        
        "üîÑ MANIPULACI√ìN DE FORMA": [
            "arr.reshape(nueva_forma) - Cambiar forma",
            "arr.flatten() - Aplanar a 1D",
            "arr.T - Transpuesta",
            "np.concatenate([a, b], axis) - Concatenar",
            "np.stack([a, b], axis) - Apilar"
        ],
        
        "üßÆ √ÅLGEBRA LINEAL": [
            "A @ B - Producto matricial",
            "np.linalg.det(A) - Determinante",
            "np.linalg.inv(A) - Inversa",
            "np.linalg.solve(A, b) - Resolver Ax = b"
        ]
    }
    
    for categoria, funciones in categorias.items():
        print(f"\n{categoria}:")
        for funcion in funciones:
            print(f"   {funcion}")
    
    print(f"\nüåê RECURSOS ADICIONALES:")
    print(f"   ‚Ä¢ Documentaci√≥n oficial: https://numpy.org/doc/")
    print(f"   ‚Ä¢ Tutorial interactivo: https://numpy.org/learn/")
    print(f"   ‚Ä¢ Cheat sheet: https://numpy.org/doc/stable/user/quickstart.html")
    print("=" * 60)


def menu_interactivo_numpy():
    """
    Men√∫ interactivo para navegar por las secciones
    """
    secciones = {
        '1': ('Introducci√≥n a NumPy', seccion_1_introduccion),
        '2': ('Creaci√≥n de Arrays', seccion_2_creacion_arrays),
        '3': ('Indexado y Slicing', seccion_3_indexado_slicing),
        '4': ('Operaciones Matem√°ticas', seccion_4_operaciones_matematicas),
        '5': ('Manipulaci√≥n de Forma', seccion_5_manipulacion_forma),
        '6': ('T√©cnicas Avanzadas', seccion_6_arrays_avanzados),
        '7': ('Aplicaciones Pr√°cticas', seccion_7_aplicaciones_practicas),
        '8': ('Optimizaci√≥n y Rendimiento', seccion_8_optimizacion_rendimiento),
        'todo': ('Ejecutar todo el tutorial', lambda: ejecutar_tutorial_completo()),
        'resumen': ('Mostrar resumen de funciones', mostrar_resumen_numpy)
    }
    
    print("\nüî¢ TUTORIAL INTERACTIVO DE NUMPY")
    print("=" * 50)
    print("Selecciona la secci√≥n que quieres explorar:")
    
    for key, (descripcion, _) in secciones.items():
        print(f"   {key}) {descripcion}")
    
    print("   0) Salir")
    
    while True:
        try:
            opcion = input("\nüëâ Ingresa tu opci√≥n: ").strip().lower()
            
            if opcion == '0':
                print("¬°Gracias por explorar NumPy! üî¢ ¬°Ahora eres un ninja de los arrays!")
                break
            elif opcion in secciones:
                print(f"\nüöÄ Ejecutando: {secciones[opcion][0]}")
                print("-" * 50)
                secciones[opcion][1]()
                input("\n‚è∏Ô∏è Presiona Enter para continuar...")
            else:
                print("‚ùå Opci√≥n no v√°lida. Por favor, intenta de nuevo.")
                
        except KeyboardInterrupt:
            print("\n\nüõë Tutorial terminado por el usuario. ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            print("üí° Continuando con el tutorial...")


def ejecutar_tutorial_completo():
    """
    Ejecuta todas las secciones en orden
    """
    print("üöÄ EJECUTANDO TUTORIAL COMPLETO DE NUMPY")
    print("=" * 60)
    
    secciones = [
        seccion_1_introduccion,
        seccion_2_creacion_arrays,
        seccion_3_indexado_slicing,
        seccion_4_operaciones_matematicas,
        seccion_5_manipulacion_forma,
        seccion_6_arrays_avanzados,
        seccion_7_aplicaciones_practicas,
        seccion_8_optimizacion_rendimiento
    ]
    
    for i, seccion in enumerate(secciones, 1):
        print(f"\nüéØ Ejecutando secci√≥n {i}/{len(secciones)}")
        try:
            seccion()
            if i < len(secciones):
                continuar = input("\n‚è∏Ô∏è Presiona Enter para continuar (o 'q' para salir): ")
                if continuar.lower() == 'q':
                    break
        except Exception as e:
            print(f"‚ùå Error en secci√≥n {i}: {e}")
            continuar = input("¬øContinuar con la siguiente secci√≥n? (s/n): ")
            if continuar.lower() != 's':
                break
    
    print("\nüéâ ¬°Tutorial completo de NumPy finalizado!")
    mostrar_resumen_numpy()


# Verificar instalaci√≥n de NumPy
if __name__ == "__main__":
    try:
        import numpy as np
        print("‚úÖ NumPy est√° correctamente instalado")
        print(f"üì¶ Versi√≥n de NumPy: {np.__version__}")
        
        # Mostrar informaci√≥n del sistema
        print(f"üñ•Ô∏è Configuraci√≥n NumPy:")
        print(f"   ‚Ä¢ Compilado con BLAS: {np.__config__.show() is None}")
        print(f"   ‚Ä¢ Soporte para arrays grandes: {np.can_cast(np.int64, np.intp)}")
        
        # Mostrar resumen primero
        mostrar_resumen_numpy()
        
        # Iniciar men√∫ interactivo
        menu_interactivo_numpy()
        
    except ImportError as e:
        print("‚ùå Error: NumPy no est√° instalado")
        print("üí° Instala NumPy con: pip install numpy")
        print(f"   Detalles del error: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        print("üí° Verifica tu instalaci√≥n de NumPy")